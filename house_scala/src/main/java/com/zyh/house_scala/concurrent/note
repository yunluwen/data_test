
并发测试

postMan --- 接口测试


并发测试工具：Apache Bench(AB)  ----mac pro上自带这个工具
是一个命令行工具
例子：ab -n 1000 -c 50 http://localhost:9999/cont/test
    -n : 请求的总数
    -c : 请求的并发数
    最后是请求的url


并发模拟 --- JMeter
下载apache Jmeter的tar包
解压
进入bin目录，执行./jmeter.sh


线程安全性：
当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些进程将如何调度执行，并且
在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的

原子性，可见性，有序性

原子性：
synchronized
修饰代码块：大括号扩起来的代码，作用于调用的对象
修饰方法：整个方法，作用于调用的对象
修饰静态方法：整个静态方法，作用于所有对象
修饰类：括号扩起来的部分，作用于所有对象

原子性对比：
synchronized：不可中断锁，适合竞争不激烈，可读性好
lock: 可中断锁，多样化同步，竞争激烈时能维持常态

可见性：
一个线程对主内存的修改，可以及时的被其他线程观察到

导致共享变量在线程间不可见的原因：
    线程交叉执行
    重排序结合线程交叉执行
    共享变量更新后的值没有在工作内存和主内存间及时更新

解决方法：
volatile变量:
通过加入内存屏障和禁止重排序优化来实现
1：对volatile变量写操作时，会在写操作后加入一条store屏障指令，
将本地内存中的共享变量值刷新到主内存
2：对volatile变量读操作时，会在读操作前加入一条load屏障指令，
从主内存中加入共享变量

volatile不具有原子性，不适合左计数类操作，会使计算结果不准确，因为可能多个线程的值
同时写入主内存，丢失一次计数的操作，如果这种情况发生的多了，就和预计值相差很多。

适合场景：


有序性：java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程
不会影响单线程程序的执行，却会影响到多线程并发执行的正确性

happens-before原则：
1：锁定规则，一个unlock操作先行发生于后面对同一个锁的lock操作
2：volatile变量规则，对一个变量的写操作先行发生于后面对这个变量的读操作。


安全发布对象
发布对象：使一个对象能够被当前范围之外的代码所使用
对象溢出：一种错误的发布。当一个对象还没有构造完成时，就使它被其他线程所见。

安全发布对象的四种方法：
1、在静态初始化函数中初始化一个对象引用
2、将对象的引用保存到volatile类型域或者AtomicReference对象中
3、将对象的引用保存到某个正确构造对象的final类型域中
4、将对象的引用保存到一个有锁保护的域中


不可变对象
不可变对象需要满足的条件：
1、对象创建以后，其状态就不能修改
2、对象所有域都是final类型
3、对象是正确创建的（在对象创建期间，this引用没有溢出）

final关键字：类，方法，变量
修饰类：不能被继承
修饰方法：1、锁定方法不被继承类修改  2、效率
修饰变量：基本数据类型变量，引用类型变量
(基本数据类型一旦初始化之后，就不能再修改了，
引用类型变量，一旦初始化之后，就不能指向另外一个变量)

不可变对象的创建：
1、Collections.unmodifiableXXX : Collection、List、Set、Map...
2、Guava:ImmutableXXX : Collection、List、Set、Map...


同步容器
ArrayList  ->  Vector,Stack
HashMap   ->   HashTable(key,value不能为null)
Collections.synchronizedXXX (list,set,map)


并发容器：JUC
ArrayList   ->   CopyOnWriteArrayList
HashSet,TreeSet   ->   CopyOnWriteArraySet,ConcurrentSkipListSet(不允许使用null)
HashMap,TreeMap   ->   ConcurrentHashMap(不允许空值，具有特别高的并发性，key是无序的),
ConcurrentSkipListMap(key是有序的)

CopyOnWriteArraySet:  线程安全的，底层实现是CopyOnWriteArrayList，
只读操作远大于可读操作，迭代器不支持remove 操作

ConcurrentSkipListSet:支持自然排序，基于map集合，
set(),add(), remove() 都是线程安全的 
对于批量操作addAll、removeAll() 方法是线程不安全的


安全共享对象策略 --- 总结
1、线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改。
2、共享只读：一个共享只读的对象，在没有额外同步的情况下，可以被多个线程
并发访问，但是任何线程都不能修改它。
3、线程安全对象：一个线程安全的对象或者容器，在内部通过同步机制来保证线程安全，
所以其他线程无需额外的同步就可以通过公共接口随意访问它。
4、被守护对象：被守护对象只能通过获取特定的锁来访问





